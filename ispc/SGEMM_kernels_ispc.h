//
// C:\Users\50510\Desktop\compare_cuda_with_ispc\compare_cuda_with_ispc\ispc\SGEMM_kernels_ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern int32_t SGEMM_get_program_count();
    extern int32_t SGEMM_get_tile_size();
    extern void SGEMM_tileBlockNoSIMDIntrin_2_double(double * matrixA, double * matrixB, double * matrixC, int32_t M, int32_t N, int32_t K);
    extern void SGEMM_tileBlockNoSIMDIntrin_2_float(float * matrixA, float * matrixB, float * matrixC, int32_t M, int32_t N, int32_t K);
    extern void SGEMM_tileBlockNoSIMDIntrin_2_int(int32_t * matrixA, int32_t * matrixB, int32_t * matrixC, int32_t M, int32_t N, int32_t K);
    extern void SGEMM_tileBlockNoSIMDIntrin_2_withTasks_double(double * matA, double * matB, double * matC, int32_t M, int32_t N, int32_t K);
    extern void SGEMM_tileBlockNoSIMDIntrin_2_withTasks_float(float * matA, float * matB, float * matC, int32_t M, int32_t N, int32_t K);
    extern void SGEMM_tileBlockNoSIMDIntrin_2_withTasks_int(int32_t * matA, int32_t * matB, int32_t * matC, int32_t M, int32_t N, int32_t K);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
